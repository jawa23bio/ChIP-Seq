CON = ['INP', 'RUNX1']
REP = ['rep1', 'rep2']

rule all:
	input: 
		'results/RUNX1_annotated.txt',
		directory('results/RUNX1_motifs/')

rule make_tag_dir:
	input: 
		bam = 'results/{condition}_{rep}.sorted.bam'
	output: 
		directory('results/{condition}_{rep}_HOMER/')
	params:
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		makeTagDirectory {output} {input.bam}
		'''

rule findPeaks:
	input: 
		INP = 'results/INP_{rep}_HOMER/',
		RUNX1 = 'results/RUNX1_{rep}_HOMER/'
	output:
		'results/{rep}_peaks.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findPeaks {input.RUNX1} -i {input.INP} -style factor -o {output}
		'''

rule convertPeakFiles:
	input:
		'results/{rep}_peaks.txt'
	output:
		'results/{rep}_peaks.bed'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		pos2bed.pl {input} > {output}
		'''

rule intersect_peaks:
	input:
		peak1 = 'results/rep1_peaks.bed',
		peak2 = 'results/rep2_peaks.bed'
	output:
		'results/RUNX1_intersect.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.peak1} -b {input.peak2} > {output}
		'''

rule filter_blacklist:
	input:
		intersect = 'results/RUNX1_intersect.bed',
		blacklist = 'results/hg38-blacklist.v2.bed'
	output:
		'results/RUNX1_bf.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -v -a {input.intersect} -b {input.blacklist} > {output}
		'''

rule unzip_gtf:
	input:
		'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		'results/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip {input}
		'''

rule annotate_peaks:
	input:
		bf = 'results/RUNX1_bf.bed',
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf'
	output:
		'results/RUNX1_annotated.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatePeaks.pl {input.bf} hg38 -gtf {input.gtf}  > {output}
		'''

rule unzip_genome:
	input:
		'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		'results/GRCh38.primary_assembly.genome.fa'
	shell:
		'''
		gunzip {input}
		'''

rule motifs:
	input:
		bf = 'results/RUNX1_bf.bed',
		fasta = 'results/GRCh38.primary_assembly.genome.fa'
	output:
		directory('results/RUNX1_motifs/')
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findMotifsGenome.pl {input.bf} {input.fasta} {output} -size 200
		'''
