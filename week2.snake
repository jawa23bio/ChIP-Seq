CON = ['INP', 'RUNX1']
REP = ['rep1', 'rep2']
NUMBER = ['1','2','3','4','rev.1','rev.2']

rule all:
	input:
		expand('results/{condition}_{rep}.bam', condition = CON, rep = REP),
		expand('results/{condition}_{rep}.sorted.bam', condition = CON, rep = REP),
		expand('results/{condition}_{rep}.sorted.bam.bai', condition = CON, rep = REP),
		expand('results/{condition}_{rep}.txt', condition = CON, rep = REP),
		'results/multiqc_report.html',
		expand('results/{condition}_{rep}.bw', condition = CON, rep = REP),
		'results/multiBwSummary.npz',
		'correlation_heatmap.png'

rule bowtie2_align:
	input:
		samples = 'results/{condition}_{rep}_trimmed.fastq',
		genome = expand('results/GRCh38.{ext}.bt2', ext = NUMBER)
	output:
		bam = 'results/{condition}_{rep}.bam'
	threads: 16
	params:
		index = 'results/GRCh38'
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2 -x {params.index} -U {input.samples} | samtools view -bS - > {output.bam}
		'''

rule samtools_sort:
	input:
		bam = 'results/{condition}_{rep}.bam'
	output:
		sorted = 'results/{condition}_{rep}.sorted.bam'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort -o {output.sorted} {input.bam} 
		'''

rule samtools_idx:
	input:
		sorted = 'results/{condition}_{rep}.sorted.bam'
	output:
		index = 'results/{condition}_{rep}.sorted.bam.bai'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools index {input.sorted} {output.index} '''

rule samtools_flagstats:
	input:
		bam = 'results/{condition}_{rep}.bam'
	output:
		flagstat = 'results/{condition}_{rep}.txt'
	conda:
		'envs/samtools_env.yml'
	shell:
		''' 
		samtools flagstat {input.bam} > {output.flagstat}
		'''

rule multiqc:
	output:
		multiqc = 'results/multiqc_report.html'
	params:
		results = 'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc --outdir {params.results} . 
		'''

rule bamCoverage:
	input:
		bam = 'results/{condition}_{rep}.sorted.bam'
	output:
		bigwig = 'results/{condition}_{rep}.bw'
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		bamCoverage -b {input.bam} -o {output.bigwig} 
		'''

rule multiBwSummary:
	input:
		bigwig = expand('results/{condition}_{rep}.bw', condition = CON, rep = REP)
	output:
		summary = 'results/multiBwSummary.npz'
	conda:
		'envs/deeptools_env.yml'
	shell:
		''' 
		multiBigwigSummary bins -b {input.bigwig} -o {output.summary}
		'''

rule plotCorrelation:
	input:
		summary = 'results/multiBwSummary.npz'
	output:
		heatmap = 'correlation_heatmap.png'
	params:
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		plotCorrelation -in {input.summary} -c pearson -p heatmap -o {output.heatmap}
		'''
